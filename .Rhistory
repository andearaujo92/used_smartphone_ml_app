runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
train %>% names()
box(sliderInput(inputId = "r_cam", label = "Rear Camera mp", min = 0, max = 60, value = 48, step = 1))
train %>% names()
model <- readRDS(file = "final_linear_reg_model.rds")
predict(model,   output_pred <- tibble(
"device_brand" = input$brand,
"os" = input$os,
"4g" = input$band1,
"5g" = input$band2,
"rear_camera_mp" = input$r_cam,
"front_camera_mp"= input$ft_cam,
"internal_memory"= input$int_mem,
"ram"= input$ram,
"battery"= input$bat,
"days_used"= input$days
))
predict(model,   tibble(
"device_brand" = input$brand,
"os" = input$os,
"4g" = input$band1,
"5g" = input$band2,
"rear_camera_mp" = input$r_cam,
"front_camera_mp"= input$ft_cam,
"internal_memory"= input$int_mem,
"ram"= input$ram,
"battery"= input$bat,
"days_used"= input$days
))
predict(model,   tibble(
"device_brand" = input$brand,
"os" = input$os,
"4g" = input$band1,
"5g" = input$band2,
"rear_camera_mp" = input$r_cam,
"front_camera_mp"= input$ft_cam,
"internal_memory"= input$int_mem,
"ram"= input$ram,
"battery"= input$bat,
"days_used"= input$days
))
predict(model,   tibble(
"device_brand" = input$brand,
"os" = input$os,
"4g" = input$band1,
"5g" = input$band2,
"rear_camera_mp" = input$r_cam,
"front_camera_mp"= input$ft_cam,
"internal_memory"= input$int_mem,
"ram"= input$ram,
"battery"= input$bat,
"days_used"= input$days
))
predict(model,   tibble(
"device_brand" = "Spice"
"os" = "Android",
model_lr <- readRDS(file = "final_linear_reg_model.rds")
predict(model_lr,   tibble(
"device_brand" = "Spice"
"os" = "Android",
predict(model_lr,   tibble("device_brand" = "Spice",
"os" = "Android",
"4g" = "yes",
"5g" = "yes",
"rear_camera_mp" = 12,
"front_camera_mp"= 12,
"internal_memory"= 128,
"ram"= 8,
"battery"= 3500,
"days_used"= 365
))
predict(model_lr,   tibble("device_brand" = "Spice",
"os" = "Android",
"4g" = "yes",
"5g" = "yes",
"rear_camera_mp" = 12,
"front_camera_mp"= 12,
"internal_memory"= 128,
"ram"= 8,
"battery"= 3500,
"days_used"= 365
))
predict(model_lr,   tibble("device_brand" = "Spice",
"os" = "Android",
"4g" = "yes",
"5g" = "yes",
"rear_camera_mp" = 12,
"front_camera_mp"= 12,
"internal_memory"= 128,
"ram"= 8,
"battery"= 3500,
"days_used"= 365))
predict(model_lr,   tibble("device_brand" = "Spice",
"os" = "Android",
"4g" = "yes",
"5g" = "yes",
"rear_camera_mp" = 12,
"front_camera_mp"= 12,
"internal_memory"= 128,
"ram"= 8,
"battery"= 3500,
"days_used"= 365))
predict(model_lr,   tibble("device_brand" = "Spice",
"os" = "Android",
"4g" = "yes",
"5g" = "yes",
"rear_camera_mp" = 12,
"front_camera_mp"= 12,
"internal_memory"= 128,
"ram"= 8,
"battery"= 3500,
"days_used"= 365))
predict(model_lr,   tibble("device_brand" = "Spice",
"os" = "Android",
"4g" = "yes",
"5g" = "yes",
"rear_camera_mp" = 12,
"front_camera_mp"= 12,
"internal_memory"= 128,
"ram"= 8,
"battery"= 3500,
"days_used"= 365))
knitr::opts_chunk$set(echo = TRUE)
final_model <- fit(final_model, train)
final_model <- workflow() %>%
add_recipe(recipe_obj) %>%
add_model(final_model)
final_model <- fit(final_model, train)
saveRDS(final_model, "final_linear_reg_model.rds")
model_lr <- readRDS(file = "final_linear_reg_model.rds")
predict(model_lr,   tibble("device_brand" = "Spice",
"os" = "Android",
"4g" = "yes",
"5g" = "yes",
"rear_camera_mp" = 12,
"front_camera_mp"= 12,
"internal_memory"= 128,
"ram"= 8,
"battery"= 3500,
"days_used"= 365))
predict(model_lr,   tibble( "device_brand" = "Spice",
"os" = "Android",
"screen_size" = 0,
"4g" = "yes",
"5g" = "yes",
"rear_camera_mp" = 12,
"front_camera_mp"= 12,
"internal_memory"= 128,
"ram"= 8,
"battery"= 3500,
"weight" = 0,
"release_year" = 2012,
"days_used"= 365))
predict(model_lr,   tibble( "device_brand" = "Spice",
"os" = "Android",
"screen_size" = 0,
"4g" = "yes",
"5g" = "yes",
"rear_camera_mp" = 12,
"front_camera_mp"= 12,
"internal_memory"= 128,
"ram"= 8,
"battery"= 3500,
"weight" = 0,
"release_year" = 2012,
"days_used"= 365),
"normalized_new_price" = 0)
predict(model_lr,   tibble( "device_brand" = "Spice",
"os" = "Android",
"screen_size" = 0,
"4g" = "yes",
"5g" = "yes",
"rear_camera_mp" = 12,
"front_camera_mp"= 12,
"internal_memory"= 128,
"ram"= 8,
"battery"= 3500,
"weight" = 0,
"release_year" = 2012,
"days_used"= 365,
"normalized_new_price" = 5))
predict(final_model, new_data = test)
test
test
recipe_obj %>% bake()
recipe_obj %>% bake()
recipe_obj %>% bake(test)
recipe_obj %>% prep() %>% bake(test)
predict(final_model, new_data = test)
test
recipe_obj %>% prep() %>% bake(train)
recipe_obj %>% prep() %>% bake(test)
predict(final_model, test)
final_wf <- workflow() %>%
add_recipe(recipe_obj) %>%
add_model(final_model)
final_model <- linear_model %>%
finalize_model(parameters = best_tune)
final_wf <- workflow() %>%
add_recipe(recipe_obj) %>%
add_model(final_model)
final_wf <- workflow() %>%
add_recipe(recipe_obj) %>%
add_model(final_model)
fn_model <- fit(final_wf, train)
predict(fn_model, test)
test
fn_model <- fit(final_wf, train)
predict(fn_model, df)
predict(fn_model)
predict(fn_model, NULL)
predict(fn_model, test)
predict(fn_model, test)
train
train
test
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidymodels)
df <- read_csv("used_device_data.csv")
df %>% head()
data_split <- initial_split(df, prop = 0.8)
test <- testing(data_split)
train <- training(data_split)
train %>%
group_by(device_brand) %>%
summarise(price = mean(normalized_used_price)) %>%
ggplot(aes(reorder(device_brand, price), price))+
geom_col()+
ggtext::geom_richtext(aes(label = round(price, 1)), alpha = 0.7, angle = 90)+
ggtitle("Price per Brand")+
theme_bw()+
theme(axis.text.x = element_text(angle = 90),
axis.title.x = element_blank(),
plot.title = element_text(hjust = 0.5))
train %>%
group_by(os) %>%
summarise(price = mean(normalized_used_price)) %>%
ggplot(aes(reorder(os, price), price))+
geom_col()+
geom_label(aes(label = round(price, 1)))+
ggtitle("Price per Brand")+
theme_bw()+
theme(axis.title.x = element_blank(),
plot.title = element_text(hjust = 0.5))
train <- train %>%
mutate(price_variation = round(((normalized_used_price / normalized_new_price)-1)*100, 2))
train %>%
group_by(device_brand) %>%
summarise(price_variation = mean(price_variation)) %>%
ggplot(aes(reorder(device_brand, price_variation), price_variation))+
geom_col()+
ggtext::geom_richtext(aes(label = round(price_variation,2)), alpha = 0.7, angle = 90)+
ggtitle("Price Variation per Brand (%)")+
theme_bw()+
theme(axis.text.x = element_text(angle = 90),
axis.title.x = element_blank(),
plot.title = element_text(hjust = 0.5))
train %>%
group_by(release_year) %>%
summarise(price_variation = mean(price_variation)) %>%
ggplot(aes(release_year, price_variation))+
geom_col()+
ggtext::geom_richtext(aes(label = round(price_variation,2)), alpha = 0.7, angle = 90)+
ggtitle("Price Variation per Year (%)")+
theme_bw()+
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(hjust = 0.5))
train %>%
group_by(release_year) %>%
summarise(mean_days_used = mean(days_used)) %>%
ggplot(aes(release_year, mean_days_used))+
geom_col()+
ggtext::geom_richtext(aes(label = round(mean_days_used,2)), alpha = 0.7)+
ggtitle("Days used mean per Year")+
theme_bw()+
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(hjust = 0.5))
train %>% head()
train %>%
select_if(is.numeric) %>%
drop_na() %>%
cor() %>%
corrplot::corrplot(addCoef.col = T)
library(GGally)
lowerFn <- function(data, mapping, method = "lm", ...) {
p <- ggplot(data = data, mapping = mapping) +
geom_point(colour = "blue") +
geom_smooth(method = method, color = "red", ...)
p
}
train %>%
select(-weight, -screen_size, -release_year, -price_variation, -normalized_new_price) %>%
select_if(is.numeric) %>%
drop_na() %>%
ggpairs(progress = F,
lower = list(continuous = wrap(lowerFn, method = "lm")))
train <- train %>%
select(-price_variation)
set.seed(123)
recipe_obj <- recipe(normalized_used_price ~ ., data = train) %>%
step_rm(weight, screen_size, release_year, normalized_new_price) %>%
step_string2factor(all_nominal_predictors()) %>%
step_impute_knn(all_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_scale(all_numeric_predictors())
recipe_obj %>% prep() %>% bake(new_data = NULL)
set.seed(123)
svm_model <- svm_linear(mode = "regression", cost = tune()) %>%
set_engine("LiblineaR")
linear_model <- linear_reg(penalty = tune()) %>%
set_engine("glmnet")
rf_model <- rand_forest(mode = "regression", trees = tune(), min_n = tune()) %>%
set_engine("ranger")
wf_svm <- workflow() %>%
add_recipe(recipe_obj) %>%
add_model(svm_model)
wf_lr <- workflow() %>%
add_recipe(recipe_obj) %>%
add_model(linear_model)
wf_rf <- workflow() %>%
add_recipe(recipe_obj) %>%
add_model(rf_model)
set.seed(123)
cv_splits <- vfold_cv(train, v = 5)
svm_trained <- wf_svm %>%
tune_grid(cv_splits,
grid = 10,
control = control_grid(save_pred = TRUE),
metrics = metric_set(rmse)
)
linear_reg_trained <- wf_lr %>%
tune_grid(cv_splits,
grid = 10,
control = control_grid(save_pred = TRUE),
metrics = metric_set(rmse)
)
rf_trained <- wf_rf %>%
tune_grid(cv_splits,
grid = 10,
control = control_grid(save_pred = TRUE),
metrics = metric_set(rmse)
)
svm_trained %>% show_best(n = 10)
linear_reg_trained %>% show_best(n=10)
rf_trained %>% show_best(n=10)
best_tune <- select_best(linear_reg_trained,"rmse")
final_model <- linear_model %>%
finalize_model(parameters = best_tune)
workflow() %>%
add_recipe(recipe_obj) %>%
add_model(final_model) %>%
last_fit(data_split) %>%
collect_predictions() %>%
ggplot(aes(normalized_used_price, .pred))+
geom_point(alpha = 0.5)+
geom_smooth()
final_wf <- workflow() %>%
add_recipe(recipe_obj) %>%
add_model(final_model)
fn_model <- fit(final_wf, train)
predict(fn_model, test)
saveRDS(final_model, "final_linear_reg_model.rds")
library(shiny)
library(shinydashboard)
library(tidymodels)
library(tidyverse)
model_lr <- readRDS(file = "final_linear_reg_model.rds")
brands <- unique(df$device_brand)
os <- unique(df$os)
predict(model_lr,   tibble( "device_brand" = "Spice",
"os" = "Android",
"screen_size" = 0,
"4g" = "yes",
"5g" = "yes",
"rear_camera_mp" = 12,
"front_camera_mp"= 12,
"internal_memory"= 128,
"ram"= 8,
"battery"= 3500,
"weight" = 0,
"release_year" = 2012,
"days_used"= 365,
"normalized_new_price" = 5))
model_lr <- readRDS(file = "final_linear_reg_model.rds")
fn_model <- fit(final_wf, train)
predict(fn_model, test)
saveRDS(fn_model, "final_linear_reg_model.rds")
model_lr <- readRDS(file = "final_linear_reg_model.rds")
predict(model_lr,   tibble( "device_brand" = "Spice",
"os" = "Android",
"screen_size" = 0,
"4g" = "yes",
"5g" = "yes",
"rear_camera_mp" = 12,
"front_camera_mp"= 12,
"internal_memory"= 128,
"ram"= 8,
"battery"= 3500,
"weight" = 0,
"release_year" = 2012,
"days_used"= 365,
"normalized_new_price" = 5))
library(shiny)
library(shinydashboard)
library(tidymodels)
library(tidyverse)
runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
model_lr <- readRDS(file = "final_linear_reg_model.rds")
runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
set.seed(123)
recipe_obj <- recipe(normalized_used_price ~ ., data = train) %>%
step_rm(weight, screen_size, release_year, normalized_new_price, device_brand) %>%
step_string2factor(all_nominal_predictors()) %>%
step_impute_knn(all_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_scale(all_numeric_predictors())
recipe_obj %>% prep() %>% bake(new_data = NULL)
set.seed(123)
svm_model <- svm_linear(mode = "regression", cost = tune()) %>%
set_engine("LiblineaR")
linear_model <- linear_reg(penalty = tune()) %>%
set_engine("glmnet")
rf_model <- rand_forest(mode = "regression", trees = tune(), min_n = tune()) %>%
set_engine("ranger")
wf_svm <- workflow() %>%
add_recipe(recipe_obj) %>%
add_model(svm_model)
wf_lr <- workflow() %>%
add_recipe(recipe_obj) %>%
add_model(linear_model)
wf_rf <- workflow() %>%
add_recipe(recipe_obj) %>%
add_model(rf_model)
set.seed(123)
cv_splits <- vfold_cv(train, v = 5)
svm_trained <- wf_svm %>%
tune_grid(cv_splits,
grid = 10,
control = control_grid(save_pred = TRUE),
metrics = metric_set(rmse)
)
linear_reg_trained <- wf_lr %>%
tune_grid(cv_splits,
grid = 10,
control = control_grid(save_pred = TRUE),
metrics = metric_set(rmse)
)
rf_trained <- wf_rf %>%
tune_grid(cv_splits,
grid = 10,
control = control_grid(save_pred = TRUE),
metrics = metric_set(rmse)
)
svm_trained %>% show_best(n = 10)
linear_reg_trained %>% show_best(n=10)
rf_trained %>% show_best(n=10)
best_tune <- select_best(linear_reg_trained,"rmse")
final_model <- linear_model %>%
finalize_model(parameters = best_tune)
workflow() %>%
add_recipe(recipe_obj) %>%
add_model(final_model) %>%
last_fit(data_split) %>%
collect_predictions() %>%
ggplot(aes(normalized_used_price, .pred))+
geom_point(alpha = 0.5)+
geom_smooth()
final_wf <- workflow() %>%
add_recipe(recipe_obj) %>%
add_model(final_model)
fn_model <- fit(final_wf, train)
predict(fn_model, test)
saveRDS(fn_model, "final_linear_reg_model.rds")
runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
shiny::runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
library(shiny)
library(shinydashboard)
library(tidymodels)
library(tidyverse)
model_lr <- readRDS(file = "final_linear_reg_model.rds")
runApp('Used_Smartphone_Dash')
runApp('Used_Smartphone_Dash')
setwd("Used_Smartphone_Dash/")
